{"version":3,"sources":["logo.svg","Components/Nav/index.js","Components/SearchBar/index.js","Components/BookCard/index.js","utils/API.js","config.js","pages/Search.js","pages/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Nav","location","useLocation","className","href","to","pathname","SearchBar","props","value","search","onChange","handleInputChange","type","placeholder","aria-label","onClick","handleFormSubmit","BookCard","results","map","result","key","title","API_KEY","book","console","log","axios","get","Search","state","event","setState","target","preventDefault","API","then","res","data","status","Error","message","error","catch","err","this","Component","Saved","App","exact","path","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9990a23e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <nav className=\"navbar navbar expand-lg navbar-dark bg-dark\">\r\n            <a className=\"navbar-brand\" href=\"/\">Book Finder</a>\r\n            <ul className=\"nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className={location.pathname === \"/\" || location.pathname === \"/search\"  ? \"nav-link active\" : \"nav-link\"}>\r\n                            Search\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/saved\" className={location.pathname === \"/saved\" ? \"nav-link active\" : \"nav-link\"}>\r\n                            Saved\r\n                        </Link>\r\n                    </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <form className=\"form-inline\">\r\n                <input  \r\n                value={props.search} \r\n                onChange={props.handleInputChange}\r\n                className=\"form-control mr-sm-2\" \r\n                type=\"search\" \r\n                placeholder=\"Search\" \r\n                aria-label=\"Search\" \r\n               ></input>\r\n                <button className=\"btn btn-outline-dark my-2 my-sm-0\" onClick={props.handleFormSubmit} type=\"submit\">Search</button>\r\n            </form>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\n\r\nfunction BookCard(props) {\r\n    return (\r\n        <div>\r\n            <ul className=\"list-group\">\r\n                {props.results.map(result => (\r\n                    <li key={result} className=\"list-group-item\">\r\n                        {result.title}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookCard;","import axios from \"axios\";\r\nimport config from \"../config\";\r\n\r\nconst API_KEY = config.API_KEY\r\n\r\nexport default {\r\n    searchForBook: function(book) {\r\n        console.log(API_KEY);\r\n        console.log(book)\r\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + book + \"&key=\" + API_KEY)\r\n        \r\n    }\r\n}","\r\nconst config =  {\r\n\r\n    API_KEY: \"AIzaSyADyKmRil4KFxGKc3C7wNhYZc_vTqSn6TE\"\r\n\r\n}\r\n\r\nexport default config;\r\n","import React, { Component } from \"react\";\r\nimport Nav from \"../Components/Nav\";\r\nimport SearchBar from \"../Components/SearchBar\";\r\nimport BookCard from \"../Components/BookCard\";\r\nimport API from \"../utils/API\"\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        search: \"\",\r\n        results: []\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value });\r\n      };\r\n      handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.searchForBook(this.state.search)\r\n          .then(res => {\r\n            if (res.data.status === \"error\") {\r\n              throw new Error(res.data.message);\r\n            }\r\n            this.setState({ results: res.data.message, error: \"\" });\r\n          })\r\n          .catch(err => this.setState({ error: err.message }));\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Nav />\r\n                <SearchBar \r\n                handleFormSubmit={this.handleFormSubmit}\r\n                handleInputChange={this.handleInputChange}\r\n                search={this.state.search}\r\n                />\r\n                <BookCard results={this.state.results} />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\n\r\nexport default Search;","import React from \"react\";\r\nimport Nav from \"../Components/Nav\";\r\n\r\nfunction Saved() {\r\n    return (\r\n        <Nav />\r\n    )\r\n}\r\n\r\n\r\nexport default Saved;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Search from \"./pages/Search\"\nimport Saved from \"./pages/Saved\"\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Nav from \"./Components/Nav\"\n\nfunction App() {\n    return (\n      <Router>\n      <div>\n        <Switch>\n          <Route exact path={[\"/\", \"/search\"]} >\n            <Search />\n          </Route>\n          <Route exact path=\"/saved\" >\n            <Saved />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    );\n  }\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}